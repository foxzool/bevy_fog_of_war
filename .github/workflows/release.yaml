name: Release

on:
  # Trigger this workflow when a tag is pushed in the format `v1.2.3`.
  push:
    tags:
      # Pattern syntax: <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet>.
      - "v[0-9]+.[0-9]+.[0-9]+*"
  # Trigger this workflow manually via workflow dispatch.
  workflow_dispatch:
    inputs:
      version:
        description: "Version number in the format `v1.2.3`"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Determine the version number for this workflow.
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Determine version number
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "${GITHUB_OUTPUT}"
    outputs:
      # Use the input from workflow dispatch, or fall back to the git tag.
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  # Run quality checks before publishing
  quality-checks:
    runs-on: ubuntu-latest
    env:
      # Use same flags as CI for consistency
      RUSTFLAGS: -Dwarnings -Zshare-generics=y -Zthreads=0
      RUSTDOCFLAGS: -Dwarnings -Zshare-generics=y -Zthreads=0
      toolchain: nightly-2025-06-26
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.toolchain }}
          components: rustfmt, clippy

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-quality-checks

      - name: Install Bevy dependencies (Linux)
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --profile ci --all-features

      - name: Run tests (unit tests only)
        run: cargo test --workspace --lib --profile ci --all-features --no-fail-fast

      - name: Check documentation
        run: cargo doc --workspace --profile ci --all-features --document-private-items --no-deps

  # Test that examples build successfully
  test-examples:
    runs-on: ubuntu-latest
    env:
      toolchain: nightly-2025-06-26
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.toolchain }}

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-test-examples

      - name: Install Bevy dependencies (Linux)
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Build examples
        run: |
          cargo build --example simple_2d --profile ci
          cargo build --example playground --profile ci

  # Publish to crates.io
  publish:
    needs: [get-version, quality-checks, test-examples]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      version: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: publish

      - name: Install Bevy dependencies (Linux)
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Verify version in Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION=${{ env.version }}
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version mismatch between Cargo.toml ($CARGO_VERSION) and git tag ($TAG_VERSION)"
            exit 1
          fi
          echo "Version verification passed: $CARGO_VERSION"

      - name: Dry run publish
        run: cargo publish --dry-run --all-features

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --all-features

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.version }}
          name: Release ${{ env.version }}
          generate_release_notes: true
          draft: false
          prerelease: false